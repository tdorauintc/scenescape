#!/bin/bash

# Copyright (C) 2021-2025 Intel Corporation
#
# This software and the related documents are Intel copyrighted materials,
# and your use of them is governed by the express license under which they
# were provided to you ("License"). Unless the License provides otherwise,
# you may not use, modify, copy, publish, distribute, disclose or transmit
# this software or the related documents without Intel's prior written permission.
#
# This software and the related documents are provided as is, with no express
# or implied warranties, other than those that are expressly stated in the License.

SECRETSDIR=${SECRETSDIR:-${WORKSPACE}/secrets}
RUNSECRETS=/run/secrets
WSUSER=${WSUSER:-scenescape}
WORKSPACE=${WORKSPACE:-/workspace}
SSCAPEDIR=SceneScape
START_CONTROLLER=0

eval WSHOME=~${WSUSER}
SSCAPEDIR="${WSHOME}/${SSCAPEDIR}"

if [ -d "${WORKSPACE}" ] ; then
    WSDIR=${HOSTDIR}
    if [ -z "${WSDIR}" ] ; then
            WSDIR=${WORKSPACE}
    fi
    WSUID=$(stat -c '%u' "${WORKSPACE}"/* | sort -rn | head -1)
    WSGID=$(stat -c '%g' "${WORKSPACE}"/* | sort -rn | head -1)
    if ((${WSUID} == 0 || ${WSGID} == 0)) ; then
            echo "Owner of ${WSDIR} is system root."
            ls -Flan "${WORKSPACE}"
            exit 1
    fi
    chown ${WSUID}:${WSGID} ${WORKSPACE}
    if [ ${WSGID} != $(id -g ${WSUSER}) ] ; then
        groupmod -g ${WSGID} ${WSUSER}
    fi
    if [ ${WSGID} != $(id -g ${WSUSER}) -o ${WSUID} != $(id -u ${WSUSER}) ] ; then
        usermod -u ${WSUID} -g ${WSGID} ${WSUSER}
    fi

    # Create a bind mount to the same location of the host dir
    if [ -n "${HOSTDIR}" ] ; then
        mkdir -p "${HOSTDIR}"
        mount --bind "${WORKSPACE}" "${HOSTDIR}"
        cd "${HOSTDIR}"
    else
        cd "${WORKSPACE}"
    fi
else
    cd "${SSCAPEDIR}"
fi

if [ -n "${SECRETSDIR}" ] ; then
    case "${SECRETSDIR}" in
        /* ) ;;
        * ) SECRETSDIR=${WORKSPACE}/${SECRETSDIR} ;;
    esac
fi

if [ ! -e ${RUNSECRETS} ] && [ -n "${SECRETSDIR}" ] && [ -d "${SECRETSDIR}" ] ; then
    echo Found some secrets
    ln -s ${SECRETSDIR} ${RUNSECRETS}
fi

while [ $# -gt 0 -a x$(expr substr "$1" 1 2) = "x--" ] ; do
    case "$1" in
        --shell)
            DO_SHELL=user
            shift
            ;;
        --super-shell)
            DO_SHELL=super
            shift
            ;;
        *)
            echo "Unknown flag $1"
            exit 1
    esac
done

WAITPID=""

if [ "$1" = "controller" ]; then
    START_CONTROLLER=1
    shift
fi

while [ $# -gt 0 -a x$(expr substr "${1:-empty}" 1 2) = "x--" ] ; do
    case "$1" in
        --broker)
            BROKER="$1 $2"
            shift 2
            ;;
        --brokerauth)
            BROKERAUTH="$2"
            shift 2
            ;;
        --brokerrootcert)
            BROKERROOTCERT="$2"
            shift 2
            ;;
        --nocontroller)
            echo Not running controller
            START_CONTROLLER=0
            shift
            ;;
        --rewriteAllTime)
            REWRITETIME="--rewriteAllTime"
            shift
            ;;
        --maxlag)
            MAXLAG="--maxlag $2"
            shift 2
            ;;
        --resturl)
            RESTURL="$1 $2"
            shift 2
            ;;
        *)
            break
            ;;
    esac
done

if [ ${START_CONTROLLER} = 1 ] ; then
    echo "Starting scene controller"

    BROKERAUTH=${BROKERAUTH:-${RUNSECRETS}/controller.auth}
    RESTAUTH=${RESTAUTH:-${RUNSECRETS}/controller.auth}
    ${SCENESCAPE_HOME}/utils/waitforbroker --brokerauth ${BROKERAUTH} ${BROKER}

    ${SCENESCAPE_HOME}/controller-cmd \
        --restauth ${RESTAUTH} ${RESTURL} \
        --brokerauth ${BROKERAUTH} ${BROKER} \
        ${REWRITETIME} ${MAXLAG} $@ &
    WAITPID="$!"
    set --
fi

echo "Took ${SECONDS} seconds"
echo "Container is ready"

# for kubernetes readinessProbe
touch /tmp/healthy

if [ -n "${WAITPID}" ]; then
    tail --pid="${WAITPID}" -f /dev/null
    wait "${WAITPID}"
else
    if [ "${DO_SHELL}" = 'user' ] ; then
        if [ $# -gt 0 ] ; then
            echo "Starting shell with command: $@"
            IFS=
            sudo -u ${WSUSER} -E -H -s $@
        else
            echo "Starting shell"
            su ${WSUSER}
        fi
    elif [ "${DO_SHELL}" = 'super' ] ; then
        if [ $# -gt 0 ] ; then
            echo "Starting super shell with command: $@"
            /bin/bash -c "$@"
        else
            echo "Starting super shell"
            /bin/bash
        fi
    else
        if [ $# -gt 0 ] ; then
            IFS=
            sudo -u ${WSUSER} -E -H $@
        else
            su ${WSUSER}
        fi
    fi
fi

exit $?
